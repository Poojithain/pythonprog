agenda:
--------
dictionaries
set
recursion---------problem statements
object oriented programming

f(n)
    if n<=10:return
    print(n-1)
    f(n-1)              o/P:12 11 10 10 11 12(tracing is writte in the notes))
    print(n-1)
    
    to find the nth fibanocci number:
    --------------------------------
    
def recfibo(n):
    if n<=1:
      print("incorrect input:")
    elif n==0:
      print("enter the number s above o")
    elif n==1:      
      return 0                                      o/p:2
    elif n==2:
      return 1
    else:
      return(recfibo(n-1)+recfibo(n-2))
n=10
print(recfibo(4))

sum of the n fibanocci numbers:
------------------------------------
                        |                                          n=int(input("entert the value to print fibanocci series upto that number:"))
                                        |                          a=0
                                        |                          b=1
                                        |                          sum=a+b
                                        |                          for i in range (3 ,n+1):
                                        |                          c=a+b
                                        |                          sum+=c
                                        |                          a=b
                                        |                          b=c
   def sumOffi                          |                          print(sum)
    if n<=0                             | 
        return -1                       |
    if n==1:                            |
        retrun 0                        |
    if n==2                             |
        return 1                        |
    first,second=0,1                    | 
    result=first+second                 |
    for i in range(0,n-2):              |
       next=first+seconf                |
       result=result+next               |
       frrst=second                     |
       second=next                      |
     print(result)
 sumOffib(10)       
 
 SET:
 ----
 Set is an uordered unindexed that does not allow the duplicate values
  few methods to call on sets:
  arr=[1,2,3,4,4,5]
  my_set=set(arr)
  1)add()          2)clear()          3)copy()
   my_set.set(34)      myset.clear()      myset.copy()
   
   we can  not access elements in sets
   if wan to then we iterate loop by by using member operator "in" for lop
   
  dictionaries:
  --------------
  data structure which is used to store the key-value
  ordered
  changeable
  not duplicate
  my_dict={"name":'sudhanshu',
            "age":"23",
            "university":"rgm"}
  print(my-dict["name"])
  updated_name={'name':"twinkle"}
  my_dict.update(updated-name)
  print(my-dict['name'])
   
   OOPs:
   ------------
   in oops logic should revolves around the class and object
   class is a bluprint ofthe object 
   instance of those classe ar known as the object
   
   creating the class in the python:    |
    class Car:                          |
        engineTYpe='strongrst engine'
        numberofTyres=4
        numberofWindow=6
        isFridgeAvailable=
    car1=car()
    print(car1.engineTYpe)
   
   
   class Car:                          |
        engineTYpe='strongrst engine'
        numberofTyres=4
        numberofWindow=6
        isFridgeAvailable=True
   def getnumberofWindows(self):
        return self.numberofWindows
   def getnumberofTyres(self):            o/p: 6
        return self.numberofTyres              4
    car1=car()
    print(car1.getnumberofWindows())
    print(car1.getnumberofTyres())
 
 
 
 
 
 
 
