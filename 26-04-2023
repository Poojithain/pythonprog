class Book:
     numberOfModel=145
     author="sudhan"
     
  def__init__(self,Zone,dob)
     self.Zone=Zone
     self.dob=dob
  my_book=Book("Mystery","25-10-1998")        O/P:145
  print(my_book.mumberOfPages)                    Mystery
  print(my_book.Zone)                              25-10-1998      
  print(my_book.dob)                        
  
  CONSTRUCTOR:
  -----------------
  WILL BE EXCUTED JUST BEFORE  CREATION OF NA OBJECT
  WILL BE EXECUTE JUST BEFORE DESTRUCTION OF THE OBJECT
  
  how to call a destructor:
  -----------------------------
  class Book:
     numberOfModel=145
     author="sudhan"
     
  def__init__(self,Zone,dob)
     self.Zone=Zone
     self.dob=dob
  def__del__(self)
     print("destructor is called")
  my_book=Book("Mystery","25-10-1998")        O/P:145
  print(my_book.mumberOfPages)                    Mystery
  print(my_book.Zone)                              25-10-1998
  print(my_book.dob)                               destructor is called
  del my_book
  
  INHERITANCE:
  ---------------
  Child class will have acces to parent class
  
  class School:
     name="RJSIS"
     age=13
      def getAge(Self):
          return self.age
   class SubSchool(School):
     def__init__(Self ):
        print("child constructor')
     def getParentName(self)
        return "RJSIS'
     def getNAMe(self)
        return"Gyan sagar"
        
-----------------------------------
class Parent1:
    def getName(self):
        return "Parent1"
class Parent2:
    def defParentName():
        return "Parent"
class Parent3:
     def getParentName():
         return "Parent 3"
class Child(Parent1,Parent2,Parent3)
    def__init__(self):
       self.getAlLParent()
    def getALLParent(self__bases__:it gives the all parents name this attribute should use on the class but on the object
        print("trying to get all paents of th is class")
        parent_list=[]
        for base in child.__bases__:
            parent_list.append(base)
        print(Parent_list)
my_child=Child()


POLYMORPHISM : 
-------------
Function with the same name but different signature
 def addNumbers(a,b)
   print(a+b)
 def addNumbers(a,b,c=2)
   print(a+b+c)
addNumbers(10,20)
addNumbers(12,1,2)                whenever we pass arguments in variable length args then it would be taken as tuple
                                
                               
def addNumbers2(*args):     by using variable length arguments it shows the behaviour of the polymorphoism
    sum=0
    for value in args:
        sum+=value            
                                
addNumbers2(1)
addNumbers2(1,2)
addNumbers2(1,2,3)
  
  
 def addNumbers(a,b)
   print(a+b)
 def addNumbers(a,*b)           o/P:10 20 ((10,30,40,20))
   print(a+b+c)                    
addNumbers(10,20)                  whenever we pass arguments in variable length args then it would be taken as tuple
addNumbers(10,30,40,20)


class Animal:
     def printSomething(self):
         print("aniamals are good in nature")
     def canFly(self,name):
         if(name=="tarak"):
             print("tarak can fly")
         else:
             print("no animals can fly")
 class Dog(Animal):
       def canFly(Self):
            print("dogs cannot fly")
 class Tarak(Anikmal)
       def
       
 class Library:
      book=["The fauk=lt in out stars","Abang","citadel"]
      author_book={ 
           "Pablo":["escobar","escobar returns","escobar part3"]
      def getAllbooks():
          pass
      def addBook():
          pass
      def getBookByAuthorName():
          for key in author_book:
            if key==author_name:
                   print(author-book[key])////git hub lo rasaru anta
          pass
      def sortBooksInTopologicalOrder():
          pass
      def getAllSubscribers():
          pass
      def gerAllEarning()
          pass
      def getUnaviableBooks()
          pass
      def mapAuthorWithBook():
          pass
class MyLibraru(lilbrary):
       #it can not have it own data structure to store the subscribers unaviable b  ooks
       def getFaviourBook()
            pass
       


     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
